name: Scala build and unit tests

on:
  workflow_call:
    inputs:
      component-name:
        required: true
        type: string
      component-dir:
        required: true
        type: string
      measure-coverage:
        required: false
        type: boolean
        default: true

jobs:
  build-and-unit-tests:
    name: "Build and unit tests for ${{ inputs.component-name }}"
    runs-on: self-hosted
    container:
      image: ghcr.io/input-output-hk/atala-qa-automation
      volumes:
        - /nix:/nix
      credentials:
        username: ${{ secrets.ATALA_GITHUB_ACTOR }}
        password: ${{ secrets.ATALA_GITHUB_TOKEN }}
      env:
        GITHUB_TOKEN: ${{ secrets.ATALA_GITHUB_TOKEN }}
        TESTCONTAINERS_RYUK_DISABLED: true
    defaults:
      run:
        working-directory: ${{ inputs.component-dir }}
    steps:
      - name: Git checkout (merge)
        uses: actions/checkout@v3
        if: github.event_name != 'pull_request'
        with:
          fetch-depth: 0

      - name: Git checkout (PR)
        uses: actions/checkout@v3
        if: github.event_name == 'pull_request'
        with:
          fetch-depth: 0
          # see: https://frontside.com/blog/2020-05-26-github-actions-pull_request/#how-does-pull_request-affect-actionscheckout
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Run Scala formatter
        run: sbt scalafmtCheckAll

      - name: Run Unit Tests
        run: |
          # Workaround for container runners to correctly restore
          # https://github.com/actions/runner/issues/863
          echo HOME=/root >> "${GITHUB_ENV}"
          sbt -v coverage test coverageAggregate

      - name: Upload coverage data to Coveralls
        run: sbt coveralls
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}

      - name: Aggregate test reports
        if: always()
        uses: ./.github/actions/aggregate-test-reports
        with:
          tests-dir: ${{ inputs.component-dir }}

      - name: Publish test results
        # Publish even if the previous test step fails
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          junit_files: "${{ inputs.component-dir }}/target/test-reports/**/TEST-*.xml"
          comment_title: "${{ inputs.component-name }} Test Results"
          check_name: "${{ inputs.component-name }} Test Results"
