---
components:
  schemas:
    # Common
    InternalServerError:
      required:
        - msg
      type: object
      properties:
        msg:
          type: string

    NotFound:
      required:
        - msg
      type: object
      properties:
        msg:
          type: string

    BadRequest:
      required:
        - msg
      type: object
      properties:
        msg:
          type: string
        errors:
          type: array
          items:
            type: string

    # Schema Registry

    Proof:
      required:
        - type
        - created
        - verificationMethod
        - proofPurpose
        - proofValue
      type: object
      properties:
        type:
          type: string
        created:
          type: string
          format: date-time
        verificationMethod:
          type: string
        proofPurpose:
          type: string
        proofValue:
          type: string
        domain:
          type: string

    VerifiableCredentialSchema:
      required:
        - id
        - name
        - version
        - author
        - authored
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        version:
          type: string
        tags:
          type: array
          items:
            type: string
        description:
          type: string
        attributes:
          type: array
          items:
            type: string
        author:
          type: string
        authored:
          type: string
          format: date-time
        proof:
          $ref: "#/components/schemas/Proof"

    VerifiableCredentialSchemaPage:
      required:
        - self
        - kind
        - pageOf
      type: object
      properties:
        self:
          type: string
        kind:
          type: string
        pageOf:
          type: string
        next:
          type: string
        previous:
          type: string
        contents:
          type: array
          items:
            $ref: "#/components/schemas/VerifiableCredentialSchema"

    VerificationPolicyConstraint:
      required:
        - schemaId
      type: object
      properties:
        schemaId:
          type: string
        trustedIssuers:
          type: array
          items:
            type: string

    VerificationCredentialSchemaInput:
      required:
        - name
        - version
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        version:
          type: string
        description:
          type: string
        attributes:
          type: array
          items:
            type: string
        authored:
          type: string
          format: date-time
        tags:
          type: array
          items:
            type: string

    VerificationPolicy:
      required:
        - self
        - kind
        - id
        - nonce
        - name
        - description
        - createdAt
        - updatedAt
      type: object
      properties:
        self:
          type: string
        kind:
          type: string
        id:
          type: string
          format: uuid
        nonce:
          type: integer
          format: int32
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        constraints:
          type: array
          items:
            $ref: "#/components/schemas/VerificationPolicyConstraint"

    VerificationPolicyInput:
      required:
        - name
        - description
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        constraints:
          type: array
          items:
            $ref: "#/components/schemas/VerificationPolicyConstraint"

    VerificationPolicyPage:
      required:
        - self
        - kind
        - pageOf
      type: object
      properties:
        self:
          type: string
        kind:
          type: string
        pageOf:
          type: string
        next:
          type: string
        previous:
          type: string
        contents:
          type: array
          items:
            $ref: "#/components/schemas/VerificationPolicy"

    # Issue Credential Protocol

    IssueCredentialRecordBase:
      required:
        - claims
      properties:
        schemaId:
          type: string
          description: The unique identifier of the schema used for this credential offer.
        subjectId:
          type: string
          description: The identifier (e.g DID) of the subject to which the verifiable credential will be issued.
          example: did:prism:subjectofverifiablecredentials
        validityPeriod:
          type: number
          description: The validity period in seconds of the verifiable credential that will be issued.
          example: 3600
        claims:
          type: object
          description: The claims that will be associated with the issued verifiable credential.
          additionalProperties:
            type: string
        automaticIssuance:
          description: |
            Specifies whether or not the credential should be automatically generated and issued when receiving the `CredentialRequest` from the holder.
            If set to `false`, a manual approval by the issuer via API call will be required for the VC to be issued.
          type: boolean
          default: true

    CreateIssueCredentialRecordRequest:
      description: A request to create a new "issue credential record".
      type: object
      allOf:
        - $ref: "#/components/schemas/IssueCredentialRecordBase"
        - type: object
          required:
            - issuingDID
            - connectionId
          properties:
            issuingDID:
              type: string
              description: The issuer DID of the verifiable credential object.
              example: did:prism:issuerofverifiablecredentials
            connectionId:
              type: string
              description: The unique identifier of a DIDComm connection that already exists between the issuer and the holder, and that will be used to execute the issue credential protocol.
    
    AcceptCredentialOfferRequest:
      description: A request to accept a credential offer received from an issuer.
      type: object
      required:
        - subjectId
      properties:
        subjectId:
          type: string
          description: The short-form subject DID to which the verifiable credential should be issued.
          example: did:prism:3bb0505d13fcb04d28a48234edb27b0d4e6d7e18a81e2c1abab58f3bbc21ce6f

    IssueCredentialRecord:
      description: An issue credential record that stores the state of the protocol execution.
      type: object
      allOf:
        - $ref: "#/components/schemas/IssueCredentialRecordBase"
        - type: object
          required:
            - recordId
            - createdAt
            - role
            - protocolState
          properties:
            recordId:
              description: The unique identifier of the issue credential record.
              type: string
              # format: uuid
            createdAt:
              description: The date and time when the issue credential record was created.
              type: string
              format: date-time
            updatedAt:
              description: The date and time when the issue credential record was last updated.
              type: string
              format: date-time
            role:
              description: The role played by the Prism agent in the credential issuance flow.
              type: string
              enum:
                - Issuer
                - Holder
            protocolState:
              description: The current state of the issue credential protocol execution.
              type: string
              enum:
                - OfferPending
                - OfferSent
                - OfferReceived
                - RequestPending
                - RequestSent
                - RequestReceived
                - ProblemReportPending
                - ProblemReportSent
                - ProblemReportReceived
                - CredentialPending
                - CredentialSent
                - CredentialReceived
            jwtCredential:
              description: The base64-encoded JWT verifiable credential that has been sent by the issuer.
              type: string
            issuingDID:
              type: string
              description: Issuer DID of the verifiable credential object.
              example: did:prism:issuerofverifiablecredentials

    IssueCredentialRecordCollection:
      description: A collection of issue credential records.
      required:
        - contents
      properties:
        contents:
          description: The array containing the list of issue credential records.
          type: array
          items:
            $ref: "#/components/schemas/IssueCredentialRecord"

    RevocationStatus:
      description: Revocation status record
      properties:
        id:
          type: string
          description: Operation id
          example: "operation1235"
        status:
          type: string
          description: Operation status
          enum:
            - scheduled
            - pending
            - completed
            - failed

    ProofRequestAux:
      required: [schemaId, trustIssuers]
      properties:
        schemaId:
          description: The unique identifier of a schema the VC should comply with.
          type: string
          example: "https://schema.org/Person"
        trustIssuers:
          description: One or more issuers that are trusted by the verifier emitting the proof presentation request.
          example:
            [
              "did:web:atalaprism.io/users/testUser",
              "did.prism:123",
              "did:prism:...",
            ]
          type: array
          items:
            type: string

    Options:
      required: [challenge, domain]
      properties:
        challenge:
          description: The challenge should be a randomly generated string.
          type: string
          example: "11c91493-01b3-4c4d-ac36-b336bab5bddf"
        domain:
          description: The domain value can be any string or URI
          example: "https://example-verifier.com"
          type: string

    RequestPresentationInput:
      description: A request to create a new "proof presentation" record and send it to the prover.
      required: [connectionId, proofs]
      properties:
        connectionId:
          description: The unique identifier of an established connection between the verifier and the prover.
          type: string
          example: bc528dc8-69f1-4c5a-a508-5f8019047900
        options:
          description: The options to use when creating the proof presentation request (e.g., domain, challenge).
          type: object
          $ref: "#/components/schemas/Options"
        proofs:
          description: The type of proofs requested in the context of this proof presentation request (e.g., VC schema, trusted issuers, etc.)
          type: array
          items:
            $ref: "#/components/schemas/ProofRequestAux"
    RequestPresentationOutput:
      description: The proof presentation record details. Only the unique identifier for now.
      required: [presentationId]
      properties:
        presentationId:
          description: Ref to the id on the presentation (db ref)
          type: string
    PresentationStatus:
      description: The proof presentation record.
      required: [presentationId, status, proofs, data]
      properties:
        presentationId:
          description: The unique identifier of the presentation record.
          type: string
          example: 3c6d9fa5-d277-431e-a6cb-d3956e47e610
        status:
          description: The current state of the proof presentation record.
          type: string
          enum:
            - RequestPending
            - RequestSent
            - RequestReceived
            - RequestRejected
            - PresentationPending
            - PresentationGenerated
            - PresentationSent
            - PresentationReceived
            - PresentationVerified
            - PresentationAccepted
            - PresentationRejected
            - ProblemReportPending
            - ProblemReportSent
            - ProblemReportReceived
        proofs:
          description: The type of proofs requested in the context of this proof presentation request (e.g., VC schema, trusted issuers, etc.)
          type: array
          items:
            $ref: "#/components/schemas/ProofRequestAux"
        data:
          description: The list of proofs presented by the prover to the verifier.
          type: array
          items:
            type: string
        connectionId:
          description: The unique identifier of an established connection between the verifier and the prover.
          type: string
          example: bc528dc8-69f1-4c5a-a508-5f8019047900
    RequestPresentationAction:
      # RequestPresentationActionAccept:
      description: The action to perform on the proof presentation record.
      required: [action]
      properties:
        action:
          type: string
          enum:
            - request-accept
            - request-reject
            - presentation-accept
            - presentation-reject
        proofId:
          description: The unique identifier of the issue credential record - and hence VC - to use as the prover accepts the presentation request. Only applicable on the prover side when the action is `request-accept`.
          type: array
          items:
            type: string
            example: 0d3a0f8d-852e-42d5-a6f8-2281c4be945c

    JWTCompactSerialisation:
      description: "Verifiable Credentials or Presentation encoded as JWT token"
      type: string
      externalDocs:
        url: "https://w3c.github.io/vc-jwt/#example-verifiable-credential-using-jwt-compact-serialization-non-normative"
      example:
        "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImRpZDpleGFtcGxlOmFiZmUxM2Y3MTIxMjA0
        MzFjMjc2ZTEyZWNhYiNrZXlzLTEifQ.eyJzdWIiOiJkaWQ6ZXhhbXBsZTplYmZlYjFmNzEyZWJjNmYxY
        zI3NmUxMmVjMjEiLCJqdGkiOiJodHRwOi8vZXhhbXBsZS5lZHUvY3JlZGVudGlhbHMvMzczMiIsImlzc
        yI6Imh0dHBzOi8vZXhhbXBsZS5jb20va2V5cy9mb28uandrIiwibmJmIjoxNTQxNDkzNzI0LCJpYXQiO
        jE1NDE0OTM3MjQsImV4cCI6MTU3MzAyOTcyMywibm9uY2UiOiI2NjAhNjM0NUZTZXIiLCJ2YyI6eyJAY
        29udGV4dCI6WyJodHRwczovL3d3dy53My5vcmcvMjAxOC9jcmVkZW50aWFscy92MSIsImh0dHBzOi8vd
        3d3LnczLm9yZy8yMDE4L2NyZWRlbnRpYWxzL2V4YW1wbGVzL3YxIl0sInR5cGUiOlsiVmVyaWZpYWJsZ
        UNyZWRlbnRpYWwiLCJVbml2ZXJzaXR5RGVncmVlQ3JlZGVudGlhbCJdLCJjcmVkZW50aWFsU3ViamVjd
        CI6eyJkZWdyZWUiOnsidHlwZSI6IkJhY2hlbG9yRGVncmVlIiwibmFtZSI6IjxzcGFuIGxhbmc9J2ZyL
        UNBJz5CYWNjYWxhdXLDqWF0IGVuIG11c2lxdWVzIG51bcOpcmlxdWVzPC9zcGFuPiJ9fX19.KLJo5GAy
        BND3LDTn9H7FQokEsUEi8jKwXhGvoN3JtRa51xrNDgXDb0cq1UTYB-rK4Ft9YVmR1NI_ZOF8oGc_7wAp
        8PHbF2HaWodQIoOBxxT-4WNqAxft7ET6lkH-4S6Ux3rSGAmczMohEEf8eCeN-jC8WekdPl6zKZQj0YPB
        1rx6X0-xlFBs7cl6Wt8rfBP_tZ9YgVWrQmUWypSioc0MUyiphmyEbLZagTyPlUyflGlEdqrZAv6eSe6R
        txJy6M1-lD7a5HTzanYTWBPAUHDZGyGKXdJw-W_x0IWChBzI8t3kpG253fg6V3tPgHeKXE94fz_QpYfg
        --7kLsyBAfQGbg"

    JWTHeader:
      description: "JWT Header for Verifiable Credentials or Verifiable Presentation"
      required:
        - alg
        - type
        - kid
      externalDocs:
        url: "https://www.rfc-editor.org/rfc/rfc7519"
      properties:
        alg:
          type: string
          description: -|
            Must be set for digital signatures.
            If only the proof property is needed for the chosen signature method, the alg header MUST be set to none
          example: RS256
        type:
          type: string
          description: if present, MUST be set to JWT
        kid:
          type: string # TODO: clarify the better type for DID key id
          description: -|
            MAY be used if there are multiple keys associated with the issuer of the JWT.
            The key discovery is out of the scope of this specification.
            For example, the kid can refer to a key in a DID document, or can be the identifier of a key inside a JWKS

    JWTCredential:
      description: "Verifiable Credential Object according to JWT specification"
      externalDocs:
        url: "https://w3c.github.io/vc-jwt/"
      required: ["exp", "iss", "nbf", "jti", "sub"]
      properties:
        exp:
          type: string
          description: MUST represent the expirationDate property, encoded as a UNIX timestamp (NumericDate).
          example: "2022-07-12T16:51:22.000Z" # TODO: exp field is required according to the spec, but looks like it's not required in VC data model
        iss:
          type: string
          description: -|
            MUST represent the issuer property of a verifiable credential or the holder property of a verifiable presentation.
            In JSON or JSON-LD formats it's 'issuer' field
          example: "did:prism:issuerdid"
        nbf:
          type: string
          description: -|
            MUST represent issuanceDate, encoded as a UNIX timestamp (NumericDate).
            Datetime in ISO format that corresponds to the date of issuance
          example: "2022-01-01T19:23:24Z"
        jti:
          type: string
          description: -|
            MUST represent the id property of the verifiable credential or verifiable presentation.
          example: "http://example.edu/credentials/1872"
        sub:
          type: string
          description: MUST represent the id property contained in the credentialSubject.
          example: "did:holder:abdce1234"
        aud:
          type: string
          description: MUST represent (i.e., identify) the intended audience of the verifiable presentation (i.e., the verifier intended by the presenting holder to receive and verify the verifiable presentation).
          example: "did:verifier:asdfkj"
        vc:
          type: object
          description: Content of Verifiable Credentials object in JSON format. Contains 'type', 'credentialsSubject' and claims
          required:
            - type
            - credentialsSubject
          additionalProperties: true
          properties:
            type:
              type: array
              items:
                type: string
              description: "Credential type according to W3C specification. Must include VerifiableCredentials and type of concrete credentials"
              example:
                - VerifiableCredential
                - UniversityDegreeCredential
            credentialSubject:
              type: object
              additionalProperties: true
              required: ["id"]
              description: "Credentials subject DID and claims according to the schema object"
              example:
                id: "did:prism:subject12345"
                alumni_of: "University"
                degree: "master of openapi specification"
              properties:
                id:
                  type: string
                  description: "DID of the subject of the credential"
        proof:
          $ref: "#/components/schemas/Proof"

    ErrorResponse:
      type: object
      description: An RFC-7807 compliant data structure for reporting errors to the client
      required:
        - type
        - title
        - status
        - instance
      properties:
        type:
          type: string
          description: A URI reference that identifies the problem type.
          example: https://example.org/doc/#model-MalformedEmail
        title:
          type: string
          example: "Malformed email"
          description: |-
            A short, human-readable summary of the problem type. It does not
            change from occurrence to occurrence of the problem.
        status:
          type: integer
          format: int32
          example: 400
          description: |-
            The HTTP status code for this occurrence of the problem.
        detail:
          type: string
          description: |-
            A human-readable explanation specific to this occurrence of the problem.
          example: "The received '{}à!è@!.b}' email does not conform to the email format"
        instance:
          type: string
          example: "/problems/d914e"
          description: |-
            A URI reference that identifies the specific occurrence of the problem.
            It may or may not yield further information if dereferenced.
