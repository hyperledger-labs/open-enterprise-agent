devMode = false
devMode = ${?DEV_MODE}

iris {
  service {
    host = "localhost"
    host = ${?IRIS_HOST}
    port = 8081
    port = ${?IRIS_PORT}
  }
}

prismNode {
  service = {
    host = "localhost"
    host = ${?PRISM_NODE_HOST}
    port = 50053
    port = ${?PRISM_NODE_PORT}
  }
}

castor {
  database {
    host = "localhost"
    host = ${?CASTOR_DB_HOST}
    port = 5432
    port = ${?CASTOR_DB_PORT}
    databaseName = "castor"
    databaseName = ${?CASTOR_DB_NAME}
    username = "postgres"
    username = ${?CASTOR_DB_USER}
    password = "postgres"
    password = ${?CASTOR_DB_PASSWORD}
    awaitConnectionThreads = 8
  }
}

pollux {
  database {
    host = "localhost"
    host = ${?POLLUX_DB_HOST}
    port = 5432
    port = ${?POLLUX_DB_PORT}
    databaseName = "pollux"
    databaseName = ${?POLLUX_DB_NAME}
    username = "postgres"
    username = ${?POLLUX_DB_USER}
    password = "postgres"
    password = ${?POLLUX_DB_PASSWORD}
    awaitConnectionThreads = 8
  }
  issueBgJobRecordsLimit = 1000
  issueBgJobRecurrenceDelay = 0.05 seconds
  issueBgJobProcessingParallelism = 50
  presentationBgJobRecordsLimit = 1000
  presentationBgJobRecurrenceDelay = 0.05 seconds
  presentationBgJobProcessingParallelism = 50
}

connect {
  database {
    host = "localhost"
    host = ${?CONNECT_DB_HOST}
    port = 5432
    port = ${?CONNECT_DB_PORT}
    databaseName = "connect"
    databaseName = ${?CONNECT_DB_NAME}
    username = "postgres"
    username = ${?CONNECT_DB_USER}
    password = "postgres"
    password = ${?CONNECT_DB_PASSWORD}
    awaitConnectionThreads = 8
  }
  connectBgJobRecordsLimit = 1000
  connectBgJobRecurrenceDelay = 0.05 seconds
  connectBgJobProcessingParallelism = 50
}

agent {
    httpEndpoint {
        http {
            port = 8085
            port =${?AGENT_HTTP_PORT}
        }
    }
    didCommServiceEndpointUrl = "http://localhost:8090"
    didCommServiceEndpointUrl = ${?DIDCOMM_SERVICE_URL}
    database {
        host = "localhost"
        host = ${?AGENT_DB_HOST}
        port = 5432
        port = ${?AGENT_DB_PORT}
        databaseName = "agent"
        databaseName = ${?AGENT_DB_NAME}
        username = "postgres"
        username = ${?AGENT_DB_USER}
        password = "postgres"
        password = ${?AGENT_DB_PASSWORD}
        awaitConnectionThreads = 8
    }
    verification {
        options {
            credential {
               verifySignature = true
               verifyDates = false
               leeway = 0 seconds
               verifySignature = ${?CREDENTIAL_VERIFY_SIGNATURE}
               verifyDates = ${?CREDENTIAL_VERIFY_DATES}
               leeway = ${?CREDENTIAL_LEEWAY}
            }
            presentation {
               verifySignature = true
               verifyDates = false
               verifyHoldersBinding = false
               leeway = 0 seconds
               verifySignature = ${?PRESENTATION_VERIFY_SIGNATURE}
               verifyDates = ${?PRESENTATION_VERIFY_DATES}
               verifyHoldersBinding = ${?PRESENTATION_VERIFY_HOLDER_BINDING}
               leeway = ${?PRESENTATION_LEEWAY}
            }
        }
    }
    secretStorage {
        // Supports the following backend: [vault, postgres]
        // If 'postgres' is used as a backend, it uses the agent db configuration
        // If any other backend is used, its corresponding configuration must be configured.
        backend = "vault"
        backend = ${?SECRET_STORAGE_BACKEND}

        // Configuration for Vault as a secret storage
        vault {
            address = "http://localhost:8200"
            address = ${?VAULT_ADDR}
            token= "root"
            token = ${?VAULT_TOKEN}
        }
    }
    webhookPublisher {
        url = ${?WEBHOOK_URL}
        apiKey = ${?WEBHOOK_API_KEY}
        parallelism = ${?WEBHOOK_PARALLELISM}
    }
}
