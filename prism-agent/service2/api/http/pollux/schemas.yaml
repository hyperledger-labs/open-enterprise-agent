components:
  schemas:
    # Schema Registry
    Proof:
      required:
        - type
        - created
        - verificationMethod
        - proofPurpose
        - proofValue
        - jws
      type: object
      properties:
        type:
          type: string
          description:
            The type of cryptographic signature algorithm used to generate
            the proof
          example: Ed25519Signature2018
        created:
          type: string
          description:
            The date and time at which the proof was created, in UTC format. This
            field is used to ensure that the proof was generated before or at the
            same time as the credential schema itself
          format: date-time
          example: "2022-03-10T12:00:00Z"
        verificationMethod:
          type: string
          description: The verification method used to generate the proof. This
            is usually a DID and key ID combination that can be used to look up the
            public key needed to verify the proof.
          example: did:prism:4a5b5cf0a513e83b598bbea25cd6196746747f361a73ef77068268bc9bd732ff#key-1
        proofPurpose:
          type: string
          description:
            "The purpose of the proof (for example: `assertionMethod`). This
            indicates that the proof is being used to assert that the issuer really
            issued this credential schema instance"
          example: assertionMethod
        proofValue:
          type: string
          description:
            The cryptographic signature value that was generated using
            the private key associated with the verification method, and which can
            be used to verify the proof
          example: FiPfjknHikKmZ...
        jws:
          type: string
          description: The JSON Web Signature (JWS) that contains the proof information
          example: eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il0sImt0eSI6Ik...
        domain:
          type: string
          description:
            It specifies the domain context within which the credential
            schema and proof are being used
          example: prims.atala.com
      description:
        A digital signature over the Credential Schema for the sake of
        asserting authorship. A piece of Metadata.
      example:
        type: Ed25519Signature2018
        created: "2022-03-10T12:00:00Z"
        verificationMethod: did:prism:4a5b5cf0a513e83b598bbea25cd6196746747f361a73ef77068268bc9bd732ff#key-1
        proofPurpose: assertionMethod
        proofValue: FiPfjknHikKmZ...
        jws: eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il0sImt0eSI6Ik...
        domain: prims.atala.com

    CredentialSchemaInput:
      required:
        - name
        - version
        - type
        - schema
      type: object
      properties:
        name:
          type: string
          description:
            A human-readable name for the credential schema. A piece of
            Metadata.
          example: DrivingLicense
        version:
          type: string
          description:
            Denotes the revision of a given Credential Schema. It should
            follow semantic version convention to describe the impact of the schema
            evolution
          example: 1.0.0
          pattern: ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
        description:
          type: string
          description: A human-readable description of the credential schema
          example:
            Simple credential schema for the driving licence verifiable credential.
            This field is not a part of W3C specification
        type:
          type: string
          description:
            This field resolves to a JSON schema with details about the
            schema metadata that applies to the schema. A piece of Metadata.
          example: https://w3c-ccg.github.io/vc-json-schemas/schema/2.0/schema.json
        schema:
          type: object
          description: |-
            Valid JSON Schema where the Credential Schema data fields are defined
            A piece of Metadata
          example:
            example:
              $id: driving-license-1.0
              $schema: https://json-schema.org/draft/2020-12/schema
              description: Driving License
              type: object
              properties:
                credentialSubject:
                  type: object
                  properties:
                    emailAddress:
                      type: string
                      format: email
                    givenName:
                      type: string
                    familyName:
                      type: string
                    dateOfIssuance:
                      type: datetime
                    drivingLicenseID:
                      type: string
                    drivingClass:
                      type: integer
                    required:
                      - emailAddress
                      - familyName
                      - dateOfIssuance
                      - drivingLicenseID
                      - drivingClass
                    additionalProperties: true
        tags:
          type: array
          items:
            type: string
          description:
            Tokens that allow to lookup and filter the credential schema
            records. This field is not a part of W3C specification
          example:
            - driving
            - licence
            - id

    CredentialSchemaResponsePage:
      required:
        - kind
        - self
        - pageOf
      type: object
      properties:
        contents:
          type: array
          items:
            $ref: "#/components/schemas/CredentialSchemaResponse"
          description:
            A sequence of CredentialSchemaResponse objects representing
            the list of credential schemas that the API response contains
        kind:
          type: string
          description:
            A string field indicating the type of the API response. In
            this case, it will always be set to `CredentialSchemaPage`
          example: CredentialSchemaPage
        self:
          type: string
          description: A string field containing the URL of the current API endpoint
          example: /prism-agent/schema-registry/schemas?skip=10&limit=10
        pageOf:
          type: string
          description:
            A string field indicating the type of resource that the contents
            field contains
          example: /prism-agent/schema-registry/schemas
        next:
          type: string
          description:
            An optional string field containing the URL of the next page
            of results. If the API response does not contain any more pages,
            this field should be set to None.
          example: /prism-agent/schema-registry/schemas?skip=20&limit=10
        previous:
          type: string
          description:
            An optional string field containing the URL of the previous
            page of results. If the API response is the first page of results,
            this field should be set to None.
          example: /prism-agent/schema-registry/schemas?skip=0&limit=10

    CredentialSchemaResponse:
      required:
        - guid
        - id
        - name
        - version
        - description
        - type
        - schema
        - author
        - authored
        - kind
        - self
      type: object
      properties:
        guid:
          type: string
          description: |
            Globally unique id of the credential schema. It's composed
            from the bytes of the string that contain the `authored`, `name`, and
            `version` values. The string format looks like the resource identifier: `author`/`id`?version=`version`
          format: uuid
          example: 0527aea1-d131-3948-a34d-03af39aba8b4
        id:
          type: string
          description: |
            A locally unique identifier to address the schema. UUID is
            generated by the backend
          example: 0527aea1-d131-3948-a34d-03af39aba8b5
        longId:
          type: string
          description:
            Resource id of the credential schema. Contains the `author`'s
            DID, `id` and `version` fields.
          example: did:prism:4a5b5cf0a513e83b598bbea25cd6196746747f361a73ef77068268bc9bd732ff/0527aea1-d131-3948-a34d-03af39aba8b4?version=1.0.0
        name:
          type: string
          description:
            A human-readable name for the credential schema. A piece of
            Metadata.
          example: DrivingLicense
        version:
          type: string
          description:
            Denotes the revision of a given Credential Schema. It should
            follow semantic version convention to describe the impact of the schema
            evolution
          example: 1.0.0
        tags:
          type: array
          items:
            type: string
          description:
            Tokens that allow to lookup and filter the credential schema
            records. This field is not a part of W3C specification
          example:
            - driving
            - licence
            - id
        description:
          type: string
          description: A human-readable description of the credential schema
          example:
            Simple credential schema for the driving licence verifiable credential.
            This field is not a part of W3C specification
        type:
          type: string
          description:
            This field resolves to a JSON schema with details about the
            schema metadata that applies to the schema. A piece of Metadata.
          example: https://w3c-ccg.github.io/vc-json-schemas/schema/2.0/schema.json
        schema:
          type: object
          description: |-
            Valid JSON Schema where the Credential Schema data fields are defined
            A piece of Metadata
          example:
            example:
              $id: driving-license-1.0
              $schema: https://json-schema.org/draft/2020-12/schema
              description: Driving License
              type: object
              properties:
                credentialSubject:
                  type: object
                  properties:
                    emailAddress:
                      type: string
                      format: email
                    givenName:
                      type: string
                    familyName:
                      type: string
                    dateOfIssuance:
                      type: datetime
                    drivingLicenseID:
                      type: string
                    drivingClass:
                      type: integer
                    required:
                      - emailAddress
                      - familyName
                      - dateOfIssuance
                      - drivingLicenseID
                      - drivingClass
                    additionalProperties: true
        author:
          type: string
          description:
            DID of the identity which authored the credential schema. A
            piece of Metadata.
          example: did:prism:4a5b5cf0a513e83b598bbea25cd6196746747f361a73ef77068268bc9bd732ff
        authored:
          type: string
          description:
            "[RFC3339](https://www.rfc-editor.org/rfc/rfc3339) date on
            which the credential schema was created. A piece of Metadata."
          format: date-time
          example: "2022-03-10T12:00:00Z"
        proof:
          $ref: "#/components/schemas/Proof"
        kind:
          type: string
          description:
            A string that identifies the type of resource being returned
            in the response
          example: CredentialSchema
        self:
          type: string
          description:
            The URL that uniquely identifies the resource being returned
            in the response
          example: /prism-agent/schema-registry/schemas/0527aea1-d131-3948-a34d-03af39aba8b4

    VerificationPolicyConstraint:
      required:
        - schemaId
      type: object
      properties:
        schemaId:
          type: string
        trustedIssuers:
          type: array
          items:
            type: string

    VerificationPolicy:
      required:
        - self
        - kind
        - id
        - nonce
        - name
        - description
        - createdAt
        - updatedAt
      type: object
      properties:
        self:
          type: string
        kind:
          type: string
        id:
          type: string
          format: uuid
        nonce:
          type: integer
          format: int32
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        constraints:
          type: array
          items:
            $ref: "#/components/schemas/VerificationPolicyConstraint"

    VerificationPolicyInput:
      required:
        - name
        - description
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        constraints:
          type: array
          items:
            $ref: "#/components/schemas/VerificationPolicyConstraint"

    VerificationPolicyPage:
      allOf:
        - $ref: "../shared/schemas.yaml#/components/schemas/Pagination"
        - type: object
          required: [contents]
          properties:
            contents:
              type: array
              items:
                $ref: "#/components/schemas/VerificationPolicy"

    # Issue Credential Protocol

    IssueCredentialRecordBase:
      required:
        - claims
      properties:
        schemaId:
          type: string
          description: The unique identifier of the schema used for this credential offer.
        subjectId:
          type: string
          description: The identifier (e.g DID) of the subject to which the verifiable credential will be issued.
          example: did:prism:subjectofverifiablecredentials
        validityPeriod:
          type: number
          description: The validity period in seconds of the verifiable credential that will be issued.
          example: 3600
        claims:
          type: object
          description: The claims that will be associated with the issued verifiable credential.
          additionalProperties:
            type: string
        automaticIssuance:
          description: |
            Specifies whether or not the credential should be automatically generated and issued when receiving the `CredentialRequest` from the holder.
            If set to `false`, a manual approval by the issuer via API call will be required for the VC to be issued.
          type: boolean
          default: true

    CreateIssueCredentialRecordRequest:
      description: A request to create a new "issue credential record".
      type: object
      allOf:
        - $ref: "#/components/schemas/IssueCredentialRecordBase"
        - type: object
          required:
            - issuingDID
            - connectionId
          properties:
            issuingDID:
              type: string
              description: The issuer DID of the verifiable credential object.
              example: did:prism:issuerofverifiablecredentials
            connectionId:
              type: string
              description: The unique identifier of a DIDComm connection that already exists between the issuer and the holder, and that will be used to execute the issue credential protocol.

    AcceptCredentialOfferRequest:
      description: A request to accept a credential offer received from an issuer.
      type: object
      required:
        - subjectId
      properties:
        subjectId:
          type: string
          description: The short-form subject Prism DID to which the verifiable credential should be issued.
          example: did:prism:3bb0505d13fcb04d28a48234edb27b0d4e6d7e18a81e2c1abab58f3bbc21ce6f

    IssueCredentialRecord:
      description: An issue credential record that stores the state of the protocol execution.
      type: object
      allOf:
        - $ref: "#/components/schemas/IssueCredentialRecordBase"
        - type: object
          required:
            - recordId
            - createdAt
            - role
            - protocolState
          properties:
            recordId:
              description: The unique identifier of the issue credential record.
              type: string
              # format: uuid
            createdAt:
              description: The date and time when the issue credential record was created.
              type: string
              format: date-time
            updatedAt:
              description: The date and time when the issue credential record was last updated.
              type: string
              format: date-time
            role:
              description: The role played by the Prism agent in the credential issuance flow.
              type: string
              enum:
                - Issuer
                - Holder
            protocolState:
              description: The current state of the issue credential protocol execution.
              type: string
              enum:
                - OfferPending
                - OfferSent
                - OfferReceived
                - RequestPending
                - RequestGenerated
                - RequestSent
                - RequestReceived
                - ProblemReportPending
                - ProblemReportSent
                - ProblemReportReceived
                - CredentialPending
                - CredentialSent
                - CredentialReceived
            jwtCredential:
              description: The base64-encoded JWT verifiable credential that has been sent by the issuer.
              type: string
            issuingDID:
              type: string
              description: Issuer DID of the verifiable credential object.
              example: did:prism:issuerofverifiablecredentials

    IssueCredentialRecordPage:
      allOf:
        - $ref: "../shared/schemas.yaml#/components/schemas/Pagination"
        - type: object
          required: [contents]
          properties:
            contents:
              type: array
              items:
                $ref: "#/components/schemas/IssueCredentialRecord"

    RevocationStatus:
      description: Revocation status record
      properties:
        id:
          type: string
          description: Operation id
          example: "operation1235"
        status:
          type: string
          description: Operation status
          enum:
            - scheduled
            - pending
            - completed
            - failed

    ProofRequestAux:
      required: [schemaId, trustIssuers]
      properties:
        schemaId:
          description: The unique identifier of a schema the VC should comply with.
          type: string
          example: "https://schema.org/Person"
        trustIssuers:
          description: One or more issuers that are trusted by the verifier emitting the proof presentation request.
          example:
            [
              "did:web:atalaprism.io/users/testUser",
              "did.prism:123",
              "did:prism:...",
            ]
          type: array
          items:
            type: string

    Options:
      required: [challenge, domain]
      properties:
        challenge:
          description: The challenge should be a randomly generated string.
          type: string
          example: "11c91493-01b3-4c4d-ac36-b336bab5bddf"
        domain:
          description: The domain value can be any string or URI
          example: "https://example-verifier.com"
          type: string

    RequestPresentationInput:
      description: A request to create a new "proof presentation" record and send it to the prover.
      required: [connectionId, proofs]
      properties:
        connectionId:
          description: The unique identifier of an established connection between the verifier and the prover.
          type: string
          example: bc528dc8-69f1-4c5a-a508-5f8019047900
        options:
          description: The options to use when creating the proof presentation request (e.g., domain, challenge).
          type: object
          $ref: "#/components/schemas/Options"
        proofs:
          description: The type of proofs requested in the context of this proof presentation request (e.g., VC schema, trusted issuers, etc.)
          type: array
          items:
            $ref: "#/components/schemas/ProofRequestAux"

    RequestPresentationOutput:
      description: The proof presentation record details. Only the unique identifier for now.
      required: [presentationId]
      properties:
        presentationId:
          description: Ref to the id on the presentation (db ref)
          type: string

    PresentationStatusPage:
      allOf:
        - $ref: "../shared/schemas.yaml#/components/schemas/Pagination"
        - type: object
          required: [contents]
          properties:
            contents:
              type: array
              items:
                $ref: "#/components/schemas/PresentationStatus"

    PresentationStatus:
      type: object
      description: The proof presentation record.
      required: [presentationId, status, proofs, data]
      properties:
        presentationId:
          description: The unique identifier of the presentation record.
          type: string
          example: 3c6d9fa5-d277-431e-a6cb-d3956e47e610
        status:
          description: The current state of the proof presentation record.
          type: string
          enum:
            - RequestPending
            - RequestSent
            - RequestReceived
            - RequestRejected
            - PresentationPending
            - PresentationGenerated
            - PresentationSent
            - PresentationReceived
            - PresentationVerified
            - PresentationAccepted
            - PresentationRejected
            - ProblemReportPending
            - ProblemReportSent
            - ProblemReportReceived
        proofs:
          description: The type of proofs requested in the context of this proof presentation request (e.g., VC schema, trusted issuers, etc.)
          type: array
          items:
            $ref: "#/components/schemas/ProofRequestAux"
        data:
          description: The list of proofs presented by the prover to the verifier.
          type: array
          items:
            type: string
        connectionId:
          description: The unique identifier of an established connection between the verifier and the prover.
          type: string
          example: bc528dc8-69f1-4c5a-a508-5f8019047900
    RequestPresentationAction:
      description: The action to perform on the proof presentation record.
      required: [action]
      properties:
        action:
          type: string
          enum:
            - request-accept
            - request-reject
            - presentation-accept
            - presentation-reject
        proofId:
          description: The unique identifier of the issue credential record - and hence VC - to use as the prover accepts the presentation request. Only applicable on the prover side when the action is `request-accept`.
          type: array
          items:
            type: string
            example: 0d3a0f8d-852e-42d5-a6f8-2281c4be945c

    JWTCompactSerialisation:
      description: "Verifiable Credentials or Presentation encoded as JWT token"
      type: string
      externalDocs:
        url: "https://w3c.github.io/vc-jwt/#example-verifiable-credential-using-jwt-compact-serialization-non-normative"
      example:
        "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImRpZDpleGFtcGxlOmFiZmUxM2Y3MTIxMjA0
        MzFjMjc2ZTEyZWNhYiNrZXlzLTEifQ.eyJzdWIiOiJkaWQ6ZXhhbXBsZTplYmZlYjFmNzEyZWJjNmYxY
        zI3NmUxMmVjMjEiLCJqdGkiOiJodHRwOi8vZXhhbXBsZS5lZHUvY3JlZGVudGlhbHMvMzczMiIsImlzc
        yI6Imh0dHBzOi8vZXhhbXBsZS5jb20va2V5cy9mb28uandrIiwibmJmIjoxNTQxNDkzNzI0LCJpYXQiO
        jE1NDE0OTM3MjQsImV4cCI6MTU3MzAyOTcyMywibm9uY2UiOiI2NjAhNjM0NUZTZXIiLCJ2YyI6eyJAY
        29udGV4dCI6WyJodHRwczovL3d3dy53My5vcmcvMjAxOC9jcmVkZW50aWFscy92MSIsImh0dHBzOi8vd
        3d3LnczLm9yZy8yMDE4L2NyZWRlbnRpYWxzL2V4YW1wbGVzL3YxIl0sInR5cGUiOlsiVmVyaWZpYWJsZ
        UNyZWRlbnRpYWwiLCJVbml2ZXJzaXR5RGVncmVlQ3JlZGVudGlhbCJdLCJjcmVkZW50aWFsU3ViamVjd
        CI6eyJkZWdyZWUiOnsidHlwZSI6IkJhY2hlbG9yRGVncmVlIiwibmFtZSI6IjxzcGFuIGxhbmc9J2ZyL
        UNBJz5CYWNjYWxhdXLDqWF0IGVuIG11c2lxdWVzIG51bcOpcmlxdWVzPC9zcGFuPiJ9fX19.KLJo5GAy
        BND3LDTn9H7FQokEsUEi8jKwXhGvoN3JtRa51xrNDgXDb0cq1UTYB-rK4Ft9YVmR1NI_ZOF8oGc_7wAp
        8PHbF2HaWodQIoOBxxT-4WNqAxft7ET6lkH-4S6Ux3rSGAmczMohEEf8eCeN-jC8WekdPl6zKZQj0YPB
        1rx6X0-xlFBs7cl6Wt8rfBP_tZ9YgVWrQmUWypSioc0MUyiphmyEbLZagTyPlUyflGlEdqrZAv6eSe6R
        txJy6M1-lD7a5HTzanYTWBPAUHDZGyGKXdJw-W_x0IWChBzI8t3kpG253fg6V3tPgHeKXE94fz_QpYfg
        --7kLsyBAfQGbg"

    JWTHeader:
      description: "JWT Header for Verifiable Credentials or Verifiable Presentation"
      required:
        - alg
        - type
        - kid
      externalDocs:
        url: "https://www.rfc-editor.org/rfc/rfc7519"
      properties:
        alg:
          type: string
          description: -|
            Must be set for digital signatures.
            If only the proof property is needed for the chosen signature method, the alg header MUST be set to none
          example: RS256
        type:
          type: string
          description: if present, MUST be set to JWT
        kid:
          type: string # TODO: clarify the better type for DID key id
          description: -|
            MAY be used if there are multiple keys associated with the issuer of the JWT.
            The key discovery is out of the scope of this specification.
            For example, the kid can refer to a key in a DID document, or can be the identifier of a key inside a JWKS

    JWTCredential:
      description: "Verifiable Credential Object according to JWT specification"
      externalDocs:
        url: "https://w3c.github.io/vc-jwt/"
      required: ["exp", "iss", "nbf", "jti", "sub"]
      properties:
        exp:
          type: string
          description: MUST represent the expirationDate property, encoded as a UNIX timestamp (NumericDate).
          example: "2022-07-12T16:51:22.000Z" # TODO: exp field is required according to the spec, but looks like it's not required in VC data model
        iss:
          type: string
          description: -|
            MUST represent the issuer property of a verifiable credential or the holder property of a verifiable presentation.
            In JSON or JSON-LD formats it's 'issuer' field
          example: "did:prism:issuerdid"
        nbf:
          type: string
          description: -|
            MUST represent issuanceDate, encoded as a UNIX timestamp (NumericDate).
            Datetime in ISO format that corresponds to the date of issuance
          example: "2022-01-01T19:23:24Z"
        jti:
          type: string
          description: -|
            MUST represent the id property of the verifiable credential or verifiable presentation.
          example: "http://example.edu/credentials/1872"
        sub:
          type: string
          description: MUST represent the id property contained in the credentialSubject.
          example: "did:holder:abdce1234"
        aud:
          type: string
          description: MUST represent (i.e., identify) the intended audience of the verifiable presentation (i.e., the verifier intended by the presenting holder to receive and verify the verifiable presentation).
          example: "did:verifier:asdfkj"
        vc:
          type: object
          description: Content of Verifiable Credentials object in JSON format. Contains 'type', 'credentialsSubject' and claims
          required:
            - type
            - credentialsSubject
          additionalProperties: true
          properties:
            type:
              type: array
              items:
                type: string
              description: "Credential type according to W3C specification. Must include VerifiableCredentials and type of concrete credentials"
              example:
                - VerifiableCredential
                - UniversityDegreeCredential
            credentialSubject:
              type: object
              additionalProperties: true
              required: ["id"]
              description: "Credentials subject DID and claims according to the schema object"
              example:
                id: "did:prism:subject12345"
                alumni_of: "University"
                degree: "master of openapi specification"
              properties:
                id:
                  type: string
                  description: "DID of the subject of the credential"
        proof:
          $ref: "#/components/schemas/Proof"
