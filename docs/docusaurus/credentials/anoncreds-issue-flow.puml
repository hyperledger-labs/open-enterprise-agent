@startuml
title Issue flow - AnonCreds

actor Holder as holder
participant VDR
participant "Holder PRISM Agent" as holderAgent
participant "Issuer PRISM Agent" as issuerAgent
actor Issuer as issuer

note over holderAgent, issuerAgent #aqua
    It is assumed that a connection already exists between the holder and the issuer, and that they both have an existing Prism DID.
    It is also assumed that AnonCreds related setup is completed (credential definition object published and holder has link secret generated).
end note
|||
== Create and send credential offer ==
|||
issuer -> issuerAgent: Create new credential offer\n""POST /issue-credentials/credential-offers""\n""{connectionId, claims, <s:red>issuingDID</s>}""\n<color:green>""{schemaId, credDefId, key_correctness_proof, nonce}""</color>
note right: AnonCreds specific inputs could be \nprovided externally by the \nIssuer's App, or we can add some \nhiger level abstraction either to \nagent or manage.
issuerAgent -> issuerAgent: Create issue credential state record
issuerAgent --> issuer: Issue credential record {id, state}
note over issuerAgent: state=OfferPending
|||

== Send credential offer over DIDComm ==
|||
issuerAgent -> holderAgent: ""CredentialOffer"" message (includes domain/challenge)
holderAgent -> holderAgent: Create issue credential state record
holderAgent --> issuerAgent: OK
note over holderAgent: state=OfferReceived
/ note over issuerAgent: state=OfferSent
|||

== Verify received credential offer (AC) ==
|||
holderAgent -> VDR: Retrieve Schema
holderAgent -> VDR: Retrieve Credential Definition
holderAgent -> holderAgent: Verify received credential offer
|||

== Review and accept credential offer ==
|||
holder -> holderAgent: Retrieve credential records\n""GET /issue-credentials/records""
holderAgent --> holder: record list
|||
holder -> holderAgent: Accept credential offer\n""POST /issue-credentials/records/{id}/accept-offer""\n""{subjectId=did:prism:xxx}""
note right #pink: Here the holder specifies the subject DID\nto which the credential should be issued \n**IS THIS RELEVANT TO AC???**\n(could be used as entropy/prover_did field)
holderAgent --> holder: OK
note over holderAgent: state=RequestPending
|||

== Generate and send credential request ==
|||
holderAgent -[#red]> holderAgent: <color:red>Sign the domain/challenge received from</color>\n<color:red>the issuer with subject Prism DID</color> (**not used in AnonCreds**)
holderAgent -> holderAgent: Create credential request <color:green>(input: offer, CD, link secret, entropy/did)</color>
note over holderAgent: state=RequestGenerated
|||
holderAgent -> issuerAgent: RequestCredential message (with DID ownership proof)
issuerAgent --> holderAgent: OK
note over holderAgent: state=RequestSent
/ note over issuerAgent: state=RequestReceived
|||

== Generate and send credential ==
|||
issuerAgent -[#green]>issuerAgent: <color:green>Verify credential request</color>
alt automaticIssuance=true
issuerAgent -> issuerAgent: Automatically approve credential request
else automaticIssuance=false
issuer -> issuerAgent: Explicitly approve credential request\n""POST /issue-credentials/records/{id}/issue-credential""
end
note over issuerAgent: state=CredentialPending
|||
issuerAgent -> issuerAgent: Generate credential signed with <s:red>Issuing Prism DID and issued to Subject Prism DID</s>\n<color:green>CredDef keys and issued to the Holder's link_secret</color>
note over issuerAgent: state=CredentialGenerated
|||
issuerAgent -> holderAgent: ""IssueCredential"" message (includes <s:red>JWT</s><color:green>AnonCreds</color> credential)
holderAgent -> holderAgent: Verify and store credential
holderAgent --> issuerAgent: OK
note over issuerAgent: state=CredentialSent
/ note over holderAgent: state=CredentialReceived
|||
@enduml
